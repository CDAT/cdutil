version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &setup_miniconda
    name: setup_miniconda
    command: |
      mkdir -p workspace
      git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'
      
  - &create_conda_env
    name: create_conda_env
    environment:
       PKGS: "genutil nose flake8 'numpy=1.14' cdat_info testsrunner"
       CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       if [[ $PY_VER = "py2" ]]; then
          conda create -n $PY_VER $CHANNELS $PKGS "python<3"
       else
          conda create -n $PY_VER $CHANNELS $PKGS "python>3" coverage coveralls
       fi 

  - &setup_cdutil
    name: setup_cdutil
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate $PY_VER
       python setup.py install
       rm -rf build

  - &run_cdutil_tests
    name: run_cdutil_tests
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       set -e
       source activate $PY_VER
       python run_tests.py -v2 -H $COVERAGE 
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT}
       exit $RESULT

  - &conda_upload
    name: conda_upload
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
    command: |
       if [[ $CIRCLE_BRANCH != 'master' ]]; then
          exit 0
       fi
       export PATH=${HOME}/project/$WORKDIR/miniconda/bin:$PATH
       conda install conda-build anaconda-client
       conda config --set anaconda_upload no
       export CONDA_BLD_PATH=`pwd`/conda_build
       git clone git://github.com/cdat/conda-recipes
       cd conda-recipes
       export PKG_NAME=cdutil
       export USER=cdat
       export VERSION=8.0
       export LABEL=nightly
       if [[ -d $PKG_NAME ]]; then
          rm -rf $PKG_NAME
       fi
       ln -s ../recipe $PKG_NAME
       python ./prep_for_build.py -l $VERSION
       conda build $PKG_NAME $CHANNELS
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $CONDA_BLD_PATH/noarch/$PKG_NAME-$VERSION.`date +%Y*`0.tar.bz2 --force

  - &run_coveralls
    name: run_coveralls
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       source activate $PY_VER
       coveralls
       source deactivate

jobs:
  macos_cdutil_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_cdutil_py2"
      OS: "osx-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdutil
      - run: *run_cdutil_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  macos_cdutil_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_cdutil_py3"
      OS: "osx-64"
      PY_VER: "py3"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdutil
      - run: *run_cdutil_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  linux_cdutil_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_cdutil_py2"
      OS: "linux-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdutil
      - run: *run_cdutil_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html

  linux_cdutil_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_cdutil_py3"
      OS: "linux-64"
      PY_VER: "py3"
      COVERAGE: "-c tests/coverage.json --coverage-from-egg"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_cdutil
      - run: *run_cdutil_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html

workflows:
  version: 2
  cdutil:
    jobs:
      - macos_cdutil_py2
      - macos_cdutil_py3:
           requires:
              - macos_cdutil_py2
      - linux_cdutil_py2
      - linux_cdutil_py3:
           requires:
              - linux_cdutil_py2




       
